apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "sda.fullname" . }}
  labels:
    app: {{ template "sda.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: {{ template "sda.fullname" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    role: broker
spec:
  replicas: 1
  updateStrategy: 
    type: {{ .Values.updateStrategyType }}
  revisionHistoryLimit: {{ default "3" .Values.revisionHistory }}
  serviceName: {{ template "sda.fullname" . }}
  selector:
    matchLabels:
      app: {{ template "sda.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "sda.fullname" . }}
        role: broker
        release: {{ .Release.Name }}
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
    {{- if .Values.rbacEnabled}}
      serviceAccountName: {{ .Release.Name }}
    {{- end }}
      securityContext:
        runAsUser: 100
        fsGroup: 101
    {{- if and  .Values.persistence.volumePermissions .Values.persistence.enabled }}
      initContainers:
      - name: init-data-chmod
        image: busybox
        command:
          - /bin/sh
          - -cx
          - |
            find /data -mindepth 1 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | xargs chown -R 100:101
            chmod 700 /data/.erlang.cookie || true
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: data
          mountPath: /data
    {{- end }}
      containers:
      - name: broker
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
          - /bin/sh
          - -c
          - |
            chmod g-rw /var/lib/rabbitmq/.erlang.cookie;
            /usr/local/bin/docker-entrypoint.sh /opt/rabbitmq/sbin/rabbitmq-server
        securityContext:
          allowPrivilegeEscalation: false
{{- if .Values.extraSecurityContext }}
{{- toYaml .Values.extraSecurityContext | nindent 10 -}}
{{- end }}
        resources:
{{ toYaml .Values.resources | trim | indent 10 }}
        env:
        - name: MQ_USER
          value: {{ required "The admin username is required" .Values.global.adminUser | quote }}
        - name: MQ_PASSWORD_HASH
          valueFrom:
            secretKeyRef:
              name: {{ template "sda.fullname" . }}
              key: password_hash
      {{- if and .Values.global.shovel.host (and .Values.global.shovel.user .Values.global.shovel.pass) }}
        - name: CEGA_CONNECTION
          valueFrom:
            secretKeyRef:
              name: {{ template "sda.fullname" . }}
              key: shovel_connection
      {{- end }}
      {{- if .Values.global.tls.enabled }}
        - name: MQ_SERVER_CERT
          value: {{ template "mqCert" . }}
        - name: MQ_SERVER_KEY
          value: {{ template "mqKey" . }}
        {{- if .Values.global.tls.verifyPeer }}
        - name: MQ_CA
          value: {{ template "caCert" . }}
        - name: MQ_VERIFY
          value: {{ template "verifyPeer" . }}
        {{- end }}
      {{- else }}
        - name: NOTLS
          value: "true"
      {{- end }}
      {{- if .Values.global.vhost }}
        - name: MQ_VHOST
          value: {{ .Values.global.vhost | quote }}
      {{- end }}
        ports:
        - containerPort: 15672
          name: management
          protocol: TCP
        - containerPort: {{ ternary 5671 5672 (.Values.global.tls.enabled )}}
          name: amqp
        livenessProbe:
          exec:
            command:
              - /bin/bash
              - -ec
              - rabbitmq-diagnostics -q ping
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
              - /bin/bash
              - -ec
              - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
        volumeMounts:
        - name: data
          mountPath: "/var/lib/rabbitmq/"
        {{- if and .Values.global.tls.enabled (not .Values.externalPkiService.tlsPath) }}
        - name: tls-certs
          mountPath: /etc/rabbitmq/tls
        {{- end }}
      volumes:
    {{- if and .Values.global.tls.enabled (not .Values.externalPkiService.tlsPath) }}
      - name: tls-certs
        secret:
          secretName: {{ template "TLSsecret" . }}
    {{- end }}
      - name: data
  {{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | quote }}
  {{- else if not .Values.persistence.enabled }}
        emptyDir: {}
  {{- else if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: {{ template "sda.fullname" . }}
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.persistence.storageSize }}
    {{- if .Values.persistence.storageClass }}
      storageClassName: {{ .Values.persistence.storageClass | quote}}
    {{- end }}
  {{- end -}}
